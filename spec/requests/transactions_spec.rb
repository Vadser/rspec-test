require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/transactions", type: :request do

  # This should return the minimal set of attributes required to create a valid
  # Transaction. As you add validations to Transaction, be sure to
  # adjust the attributes here as well.
  let(:user) { create(:user) }

  let(:transaction) { create(:transaction, :byn, name: 'Were') }

  let(:valid_attributes) {
    attributes_for(:transaction, :byn)
  }

  let(:invalid_attributes) {
    attributes_for(:transaction, currency: 'Unknown')
  }

  before { sign_in(user) }

  describe "POST /convert" do
    it "converts transaction amount" do
      result_ok = instance_double(Result::Ok, result: 205)
      allow(ConvertAmountService).to receive(:convert).and_return(result_ok)
      expect(ConvertAmountService).to receive(:convert).with(transaction.amount, transaction.currency).and_return(result_ok)
      post convert_transaction_url(transaction)

      expect(transaction.reload.converted_amount).to eq(205)
    end
  end

  describe "GET /index" do
    let!(:transaction) { create(:transaction, :eur) }

    it "renders a successful response" do
      get transactions_url
      expect(assigns(:transactions)).to eq([transaction])
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      get transaction_url(transaction)
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      get edit_transaction_url(transaction)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it_behaves_like 'a successful create transaction request'

      it "redirects to the created transaction" do
        post transactions_url, params: { transaction: valid_attributes }
        expect(response).to redirect_to(transaction_url(Transaction.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Transaction" do
        expect {
          post transactions_url, params: { transaction: invalid_attributes }
        }.to change(Transaction, :count).by(0)
      end

      # it "renders a successful response (i.e. to display the 'new' template)" do
      #   post transactions_url, params: { transaction: invalid_attributes }
        
      #   expect(response).to be_successful
      # end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) {
        attributes_for(:transaction, :eur)
      }

      it "updates the requested transaction" do

        patch transaction_url(transaction), params: { transaction: new_attributes }
        transaction.reload
      end

      it "redirects to the transaction" do

        patch transaction_url(transaction), params: { transaction: new_attributes }
        transaction.reload
        expect(response).to redirect_to(transaction_url(transaction))
      end
    end

    # context "with invalid parameters" do
    #   it "renders a successful response (i.e. to display the 'edit' template)" do
        
    #     patch transaction_url(transaction), params: { transaction: invalid_attributes }
    #     expect(response).to be_successful
    #   end
    # end
  end

  describe "DELETE /destroy" do
    let!(:transaction) { create(:transaction, :eur) }
    it "destroys the requested transaction" do
      expect {
        delete transaction_url(transaction)
      }.to change(Transaction, :count).by(-1)
    end

    it "redirects to the transactions list" do
      
      delete transaction_url(transaction)
      expect(response).to redirect_to(transactions_url)
    end
  end
end
